/*
 * Copyright (c) 2022 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/ext_power.h>

// Naming convention
// ---
// First letter:
//   w -> windows
//   l -> linux
//   m -> mac
// 2nd and 3rd letter:
//   en -> US International
//   hu -> Hungarian
//
// dacute -> double acute
// cap -> capital

// LAYERS FOR WIN-ENGLISH-QUERTY HOST (WEN)
//
// Colemak-DOX
#define WEN_BASE  0
#define WEN_NAV   1
#define WEN_NUM   2
#define WEN_FUNC  3
#define WEN_MEDIA 4
// Acute
#define WEN_AL    5
#define WEN_AL2   6
// Double acute
#define WEN_DAL   7
// Diaresis
#define WEN_DL    8

/ {
    behaviors {
      skq: sticky_key_quick_release {
        compatible = "zmk,behavior-sticky-key";
        label = "STICKY_KEY_QUICK_RELEASE";
        #binding-cells = <1>;
        bindings = <&kp>;
        release-after-ms = <1000>;
        quick-release;
        ignore-modifiers;
      };

      o_acute_wen: o_acute_wen_with_shift {
        compatible = "zmk,behavior-mod-morph";
        label = "O_ACUTE_WITH_SHIFT";
        #binding-cells = <0>;
        bindings = <&m_o_acute_wen>, <&m_cap_o_acute_wen>;
        mods = <(MOD_RSFT|MOD_LSFT)>;
      };

      e_acute_wen: e_acute_wen_with_shift {
        compatible = "zmk,behavior-mod-morph";
        label = "E_ACUTE_WITH_SHIFT";
        #binding-cells = <0>;
        bindings = <&m_e_acute_wen>, <&m_cap_e_acute_wen>;
        mods = <(MOD_RSFT|MOD_LSFT)>;
      };

      a_acute_wen: a_acute_wen_with_shift {
        compatible = "zmk,behavior-mod-morph";
        label = "A_ACUTE_WITH_SHIFT";
        #binding-cells = <0>;
        bindings = <&m_a_acute2_wen>, <&m_cap_a_acute2_wen>;
        mods = <(MOD_RSFT|MOD_LSFT)>;
      };

      u_acute_wen: u_acute_wen_with_shift {
        compatible = "zmk,behavior-mod-morph";
        label = "U_ACUTE_WITH_SHIFT";
        #binding-cells = <0>;
        bindings = <&m_u_acute_wen>, <&m_cap_u_acute_wen>;
        mods = <(MOD_RSFT|MOD_LSFT)>;
      };

      i_acute_wen: i_acute_wen_with_shift {
        compatible = "zmk,behavior-mod-morph";
        label = "I_ACUTE_WITH_SHIFT";
        #binding-cells = <0>;
        bindings = <&m_i_acute_wen>, <&m_cap_i_acute_wen>;
        mods = <(MOD_RSFT|MOD_LSFT)>;
      };

      o_dacute_wen: o_dacute_wen_with_shift {
        compatible = "zmk,behavior-mod-morph";
        label = "O_DACUTE_WITH_SHIFT";
        #binding-cells = <0>;
        bindings = <&m_o_dacute_wen>, <&m_cap_o_dacute_wen>;
        mods = <(MOD_RSFT|MOD_LSFT)>;
      };

      u_dacute_wen: u_dacute_wen_with_shift {
        compatible = "zmk,behavior-mod-morph";
        label = "U_DACUTE_WITH_SHIFT";
        #binding-cells = <0>;
        bindings = <&m_u_dacute_wen>, <&m_cap_u_dacute_wen>;
        mods = <(MOD_RSFT|MOD_LSFT)>;
      };

      o_diaresis_wen: o_diaresis_wen_with_shift {
        compatible = "zmk,behavior-mod-morph";
        label = "O_DIARESIS_WITH_SHIFT";
        #binding-cells = <0>;
        bindings = <&m_o_diaresis_wen>, <&m_cap_o_diaresis_wen>;
        mods = <(MOD_RSFT|MOD_LSFT)>;
      };

      u_diaresis_wen: u_diaresis_wen_with_shift {
        compatible = "zmk,behavior-mod-morph";
        label = "U_DIARESIS_WITH_SHIFT";
        #binding-cells = <0>;
        bindings = <&m_u_diaresis_wen>, <&m_cap_u_diaresis_wen>;
        mods = <(MOD_RSFT|MOD_LSFT)>;
      };

    };

 macros {
 // wait-ms and tap-ms value
 // ---
 //
 // Executing an accented macro should not take longer than tapping a dedicated
 // key at maximum speed(300 WPM).
 //
 // 38 WPM -> 188 CPM, so 300 WPM -> (* 188 (/ 300 38)) = 1316 CPM =
 // (/ 1316 60) CPS = 21 CPS
 //
 // Hitting keys close to 50 ms / keypress is humanly possible.
 //
 // Unicode Sequences
 // ---
 //
 // Emacs uses the alt-num combination as a prefix argument, so unicode
 // sequences do not work in emacs
 //
 // Num lock state interferes with Unicode Sequences. You must have a num lock
 // key to make unicode sequences work.
 //
 // Unicode Sequences do not handle shift states automatically for capital
 // letters

        ZMK_MACRO(m_under_wen,
            wait-ms = <13>;
            tap-ms = <13>;
            bindings
                = <&macro_tap     &kp UNDER>
                , <&macro_tap     &to WEN_BASE>
                ;
        )
 
        ZMK_MACRO(m_dllr_wen,
            wait-ms = <13>;
            tap-ms = <13>;
            bindings
                = <&macro_tap     &kp DLLR>
                , <&macro_tap     &to WEN_BASE>
                ;
        )
 
        ZMK_MACRO(m_amps_wen,
            wait-ms = <13>;
            tap-ms = <13>;
            bindings
                = <&macro_tap     &kp AMPS>
                , <&macro_tap     &to WEN_BASE>
                ;
        )

        ZMK_MACRO(m_pipe_wen,
            wait-ms = <13>;
            tap-ms = <13>;
            bindings
                = <&macro_tap     &kp PIPE>
                , <&macro_tap     &to WEN_BASE>
                ;
        )

        ZMK_MACRO(m_hash_wen,
            wait-ms = <13>;
            tap-ms = <13>;
            bindings
                = <&macro_tap     &kp HASH>
                , <&macro_tap     &to WEN_BASE>
                ;
        )

        ZMK_MACRO(m_caret_wen,
            wait-ms = <13>;
            tap-ms = <13>;
            bindings
                = <&macro_tap     &kp CARET>
                , <&macro_tap     &to WEN_BASE>
                ;
        )

        ZMK_MACRO(m_equal_wen,
            wait-ms = <13>;
            tap-ms = <13>;
            bindings
                = <&macro_tap     &kp EQUAL>
                , <&macro_tap     &to WEN_BASE>
                ;
        )

        ZMK_MACRO(m_bslh_wen,
            wait-ms = <13>;
            tap-ms = <13>;
            bindings
                = <&macro_tap     &kp BSLH>
                , <&macro_tap     &to WEN_BASE>
                ;
        )

        ZMK_MACRO(m_plus_wen,
            wait-ms = <13>;
            tap-ms = <13>;
            bindings
                = <&macro_tap     &kp PLUS>
                , <&macro_tap     &to WEN_BASE>
                ;
        )

        ZMK_MACRO(m_tilde_wen,
            wait-ms = <13>;
            tap-ms = <13>;
            bindings
                = <&macro_tap     &kp TILDE>
                , <&macro_tap     &to WEN_BASE>
                ;
        )

        ZMK_MACRO(m_grave_wen,
            wait-ms = <13>;
            tap-ms = <13>;
            bindings
                = <&macro_tap     &kp GRAVE>
                , <&macro_tap     &to WEN_BASE>
                ;
        )

        ZMK_MACRO(m_lpar_wen,
            wait-ms = <13>;
            tap-ms = <13>;
            bindings
                = <&macro_tap     &kp LPAR>
                , <&macro_tap     &to WEN_BASE>
                ;
        )

        ZMK_MACRO(m_lbkt_wen,
            wait-ms = <13>;
            tap-ms = <13>;
            bindings
                = <&macro_tap     &kp LBKT>
                , <&macro_tap     &to WEN_BASE>
                ;
        )

        ZMK_MACRO(m_lbrc_wen,
            wait-ms = <13>;
            tap-ms = <13>;
            bindings
                = <&macro_tap     &kp LBRC>
                , <&macro_tap     &to WEN_BASE>
                ;
        )

        ZMK_MACRO(m_rpar_wen,
            wait-ms = <13>;
            tap-ms = <13>;
            bindings
                = <&macro_tap     &kp RPAR>
                , <&macro_tap     &to WEN_BASE>
                ;
        )

        ZMK_MACRO(m_rbkt_wen,
            wait-ms = <13>;
            tap-ms = <13>;
            bindings
                = <&macro_tap     &kp RBKT>
                , <&macro_tap     &to WEN_BASE>
                ;
        )
        
        ZMK_MACRO(m_rbrc_wen,
            wait-ms = <13>;
            tap-ms = <13>;
            bindings
                = <&macro_tap     &kp RBRC>
                , <&macro_tap     &to WEN_BASE>
                ;
        )

        ZMK_MACRO(m_at_wen,
            wait-ms = <13>;
            tap-ms = <13>;
            bindings
                = <&macro_tap     &kp AT>
                , <&macro_tap     &to WEN_BASE>
                ;
        )

        ZMK_MACRO(m_prcnt_wen,
            wait-ms = <13>;
            tap-ms = <13>;
            bindings
                = <&macro_tap     &kp PRCNT>
                , <&macro_tap     &to WEN_BASE>
                ;
        )

        ZMK_MACRO(m_star_wen,
            wait-ms = <13>;
            tap-ms = <13>;
            bindings
                = <&macro_tap     &kp STAR>
                , <&macro_tap     &to WEN_BASE>
                ;
        )

        ZMK_MACRO(m_again_wen,
            wait-ms = <13>;
            tap-ms = <13>;
            bindings
                = <&macro_press   &kp LCTRL>
                , <&macro_tap     &kp Y>
                , <&macro_release &kp LCTRL>
                ;
        )

        ZMK_MACRO(m_paste_wen,
            wait-ms = <13>;
            tap-ms = <13>;
            bindings
                = <&macro_press   &kp LCTRL>
                , <&macro_tap     &kp V>
                , <&macro_release &kp LCTRL>
                ;
        )

        ZMK_MACRO(m_copy_wen,
            wait-ms = <13>;
            tap-ms = <13>;
            bindings
                = <&macro_press   &kp LCTRL>
                , <&macro_tap     &kp C>
                , <&macro_release &kp LCTRL>
                ;
        )

        ZMK_MACRO(m_cut_wen,
            wait-ms = <13>;
            tap-ms = <13>;
            bindings
                = <&macro_press   &kp LCTRL>
                , <&macro_tap     &kp X>
                , <&macro_release &kp LCTRL>
                ;
        )

        ZMK_MACRO(m_undo,
            wait-ms = <13>;
            tap-ms = <13>;
            bindings
                = <&macro_press   &kp LCTRL>
                , <&macro_tap     &kp Z>
                , <&macro_release &kp LCTRL>
                ;
        )

        ZMK_MACRO(m_esc_wen,
            wait-ms = <13>;
            tap-ms = <13>;
            bindings
                = <&macro_tap     &kp ESC>
                , <&macro_tap     &to WEN_BASE>
                ;
        )

        ZMK_MACRO(m_ret_wen,
            wait-ms = <13>;
            tap-ms = <13>;
            bindings
                = <&macro_tap     &kp RET>
                , <&macro_tap     &to WEN_BASE>
                ;
        )

       ZMK_MACRO(m_lgui_wen,
            wait-ms = <13>;
            tap-ms = <13>;
            bindings
                = <&macro_tap     &skq LGUI>
                , <&macro_tap     &to WEN_BASE>
                ;
        )

        ZMK_MACRO(m_e_acute_wen,
            wait-ms = <13>;
            tap-ms = <13>;
            bindings
                = <&macro_press   &kp LALT>
                , <&macro_tap     &kp KP_N1 &kp KP_N3 &kp KP_N0>
                , <&macro_release &kp LALT>
                , <&macro_tap     &to WEN_BASE>
                ;
        )

        ZMK_MACRO(m_cap_e_acute_wen,
            wait-ms = <13>;
            tap-ms = <13>;
            bindings
                = <&macro_press   &kp LALT>
                , <&macro_tap     &kp KP_N1 &kp KP_N4 &kp KP_N4>
                , <&macro_release &kp LALT>
                , <&macro_tap     &to WEN_BASE>
                ;
        )

        ZMK_MACRO(m_o_acute_wen,
            wait-ms = <13>;
            tap-ms = <13>;
            bindings
                = <&macro_press   &kp LALT>
                , <&macro_tap     &kp KP_N1 &kp KP_N6 &kp KP_N2>
                , <&macro_release &kp LALT>
                , <&macro_tap     &to WEN_BASE>
                ;
        )

        ZMK_MACRO(m_cap_o_acute_wen,
            wait-ms = <13>;
            tap-ms = <13>;
            bindings
                = <&macro_press   &kp LALT>
                , <&macro_tap     &kp KP_N0 &kp KP_N2 &kp KP_N1 &kp KP_N1>
                , <&macro_release &kp LALT>
                , <&macro_tap     &to WEN_BASE>
                ;
        )

        ZMK_MACRO(m_i_acute_wen,
            wait-ms = <13>;
            tap-ms = <13>;
            bindings
                = <&macro_press   &kp LALT>
                , <&macro_tap     &kp KP_N1 &kp KP_N6 &kp KP_N1>
                , <&macro_release &kp LALT>
                , <&macro_tap     &to WEN_BASE>
                ;
        )

        ZMK_MACRO(m_cap_i_acute_wen,
            wait-ms = <13>;
            tap-ms = <13>;
            bindings
                = <&macro_press   &kp LALT>
                , <&macro_tap     &kp KP_N0 &kp KP_N2 &kp KP_N0 &kp KP_N5>
                , <&macro_release &kp LALT>
                , <&macro_tap     &to WEN_BASE>
                ;
        )

        ZMK_MACRO(m_u_acute_wen,
            wait-ms = <13>;
            tap-ms = <13>;
            bindings
                = <&macro_press   &kp LALT>
                , <&macro_tap     &kp KP_N1 &kp KP_N6 &kp KP_N3>
                , <&macro_release &kp LALT>
                , <&macro_tap     &to WEN_BASE>
                ;
        )

        ZMK_MACRO(m_cap_u_acute_wen,
            wait-ms = <13>;
            tap-ms = <13>;
            bindings
                = <&macro_press   &kp LALT>
                , <&macro_tap     &kp KP_N0 &kp KP_N2 &kp KP_N1 &kp KP_N8>
                , <&macro_release &kp LALT>
                , <&macro_tap     &to WEN_BASE>
                ;
        )

        ZMK_MACRO(m_a_acute2_wen,
            wait-ms = <13>;
            tap-ms = <13>;
            bindings
                = <&macro_press   &kp LALT>
                , <&macro_tap     &kp KP_N1 &kp KP_N6 &kp KP_N0>
                , <&macro_release &kp LALT>
                , <&macro_tap     &to WEN_BASE>
                ;
        )

        ZMK_MACRO(m_cap_a_acute2_wen,
            wait-ms = <13>;
            tap-ms = <13>;
            bindings
                = <&macro_press   &kp LALT>
                , <&macro_tap     &kp KP_N0 &kp KP_N1 &kp KP_N9 &kp KP_N3>
                , <&macro_release &kp LALT>
                , <&macro_tap     &to WEN_BASE>
                ;
        )

        ZMK_MACRO(m_o_dacute_wen,
            wait-ms = <13>;
            tap-ms = <13>;
            bindings
                = <&macro_press   &kp LALT>
                , <&macro_tap     &kp KP_N0 &kp KP_N3 &kp KP_N3 &kp KP_N7>
                , <&macro_release &kp LALT>
                , <&macro_tap     &to WEN_BASE>
                ;
        )

        ZMK_MACRO(m_cap_o_dacute_wen,
            wait-ms = <13>;
            tap-ms = <13>;
            bindings
                = <&macro_press   &kp LALT>
                , <&macro_tap     &kp KP_N0 &kp KP_N3 &kp KP_N3 &kp KP_N6>
                , <&macro_release &kp LALT>
                , <&macro_tap     &to WEN_BASE>
                ;
        )

        ZMK_MACRO(m_u_dacute_wen,
            wait-ms = <13>;
            tap-ms = <13>;
            bindings
                = <&macro_press   &kp LALT>
                , <&macro_tap     &kp KP_N0 &kp KP_N3 &kp KP_N6 &kp KP_N9>
                , <&macro_release &kp LALT>
                , <&macro_tap     &to WEN_BASE>
                ;
        )

        ZMK_MACRO(m_cap_u_dacute_wen,
            wait-ms = <13>;
            tap-ms = <13>;
            bindings
                = <&macro_press   &kp LALT>
                , <&macro_tap     &kp KP_N0 &kp KP_N3 &kp KP_N6 &kp KP_N8>
                , <&macro_release &kp LALT>
                , <&macro_tap     &to WEN_BASE>
                ;
        )

        ZMK_MACRO(m_o_diaresis_wen,
            wait-ms = <13>;
            tap-ms = <13>;
            bindings
                = <&macro_press   &kp LALT>
                , <&macro_tap     &kp KP_N1 &kp KP_N4 &kp KP_N8>
                , <&macro_release &kp LALT>
                , <&macro_tap     &to WEN_BASE>
                ;
        )

        ZMK_MACRO(m_cap_o_diaresis_wen,
            wait-ms = <13>;
            tap-ms = <13>;
            bindings
                = <&macro_press   &kp LALT>
                , <&macro_tap     &kp KP_N1 &kp KP_N5 &kp KP_N3>
                , <&macro_release &kp LALT>
                , <&macro_tap     &to WEN_BASE>
                ;
        )

        ZMK_MACRO(m_u_diaresis_wen,
            wait-ms = <13>;
            tap-ms = <13>;
            bindings
                = <&macro_press   &kp LALT>
                , <&macro_tap     &kp KP_N1 &kp KP_N2 &kp KP_N9>
                , <&macro_release &kp LALT>
                , <&macro_tap     &to WEN_BASE>
                ;
        )

        ZMK_MACRO(m_cap_u_diaresis_wen,
            wait-ms = <13>;
            tap-ms = <13>;
            bindings
                = <&macro_press   &kp LALT>
                , <&macro_tap     &kp KP_N1 &kp KP_N5 &kp KP_N4>
                , <&macro_release &kp LALT>
                , <&macro_tap     &to WEN_BASE>
                ;
        )

        ZMK_MACRO(m_comma_wen,
            wait-ms = <25>;
            tap-ms = <25>;
            bindings
                = <&macro_tap     &kp COMMA>
                , <&macro_tap     &to WEN_BASE>
                ;
        )

        ZMK_MACRO(m_sqt_wen,
            wait-ms = <25>;
            tap-ms = <25>;
            bindings
                = <&macro_tap     &kp SQT>
                , <&macro_tap     &to WEN_BASE>
                ;
        )

        ZMK_MACRO(m_dqt_wen,
            wait-ms = <25>;
            tap-ms = <25>;
            bindings
                = <&macro_tap     &kp DQT>
                , <&macro_tap     &to WEN_BASE>
                ;
        )

        ZMK_MACRO(m_dot_wen,
            wait-ms = <25>;
            tap-ms = <25>;
            bindings
                = <&macro_tap     &kp DOT>
                , <&macro_tap     &to WEN_BASE>
                ;
        )
        
        ZMK_MACRO(m_excl_wen,
            wait-ms = <25>;
            tap-ms = <25>;
            bindings
                = <&macro_tap     &kp EXCL>
                , <&macro_tap     &to WEN_BASE>
                ;
        )
        
        ZMK_MACRO(m_semi_wen,
            wait-ms = <25>;
            tap-ms = <25>;
            bindings
                = <&macro_tap     &kp SEMI>
                , <&macro_tap     &to WEN_BASE>
                ;
        )

        ZMK_MACRO(m_fslh_wen ,
            wait-ms = <25>;
            tap-ms = <25>;
            bindings
                = <&macro_tap     &kp FSLH>
                , <&macro_tap     &to WEN_BASE>
                ;
        )
        
        ZMK_MACRO(m_minus_wen,
            wait-ms = <25>;
            tap-ms = <25>;
            bindings
                = <&macro_tap     &kp MINUS>
                , <&macro_tap     &to WEN_BASE>
                ;
        )
        
        ZMK_MACRO(m_qmark_wen,
            wait-ms = <25>;
            tap-ms = <25>;
            bindings
                = <&macro_tap     &kp QMARK>
                , <&macro_tap     &to WEN_BASE>
                ;
        )
        
        ZMK_MACRO(m_colon_wen ,
            wait-ms = <25>;
            tap-ms = <25>;
            bindings
                = <&macro_tap     &kp COLON>
                , <&macro_tap     &to WEN_BASE>
                ;
        )
        
        ZMK_MACRO(m_gt_wen,
            wait-ms = <25>;
            tap-ms = <25>;
            bindings
                = <&macro_tap     &kp GT>
                , <&macro_tap     &to WEN_BASE>
                ;
        )
        
        ZMK_MACRO(m_lt_wen,
            wait-ms = <25>;
            tap-ms = <25>;
            bindings
                = <&macro_tap     &kp LT>
                , <&macro_tap     &to WEN_BASE>
                ;
        )

    };

    keymap {
        compatible = "zmk,keymap";

        base_wen_layer {
// COLEMAK-DH
            bindings = <
    &to WEN_DAL  &kp W       &kp F      &kp P        &kp B           &kp J   &kp L        &kp U        &kp Y       &kp Q
    &kp A        &kp R       &kp S      &kp T        &kp G           &kp M   &kp N        &kp E        &kp I       &kp O
    &to WEN_DL   &to WEN_AL  &kp C      &kp D        &kp V           &kp K   &kp H        &to WEN_AL2  &kp X       &kp Z
    &kp N1       &skq LALT   &kp SPACE  &to WEN_NAV  &kp N2          &kp N3  &to WEN_NUM  &skq LSHFT   &skq LCTRL  &kp N4
            >;

            sensor-bindings = <&inc_dec_kp PAGE_UP PAGE_DOWN &inc_dec_kp TAB LS(TAB)>;
        };

        navigation_layer {
// WEN_NAV
            bindings = <
    &kp ESC      &kp BSPC      &kp DEL    &kp K_APP      &kp KP_NUMLOCK          &m_again_wen  &m_paste_wen  &m_copy_wen   &m_cut_wen    &m_undo
    &m_lgui_wen  &kp LC(BSPC)  &kp RET    &kp TAB        &caps_word              &kp CAPS      &kp LEFT      &kp DOWN      &kp UP        &kp RIGHT
    &kp LGUI     &kp LALT      &kp LCTRL  &kp LSHFT      &kp SCROLLLOCK          &kp INS       &kp HOME      &kp PG_DN     &kp PG_UP     &kp END
    &kp N1       &kp SPACE     &none      &to WEN_MEDIA  &kp N2                  &kp N3        &to WEN_NUM   &to WEN_BASE  &m_ret_wen    &kp N4
            >;

            sensor-bindings = <&inc_dec_kp PAGE_UP PAGE_DOWN &inc_dec_kp TAB LS(TAB)>;
        };

        number_layer {
// WEN_NUM, KP_DOT would be better here instad of DOT, but num lock state interferes with KP_DOT.
            bindings = <
    &kp EQUAL  &kp N9      &kp N8  &kp N7       &kp FSLH           &none      &none         &kp DEL       &kp BSPC      &kp ESC
    &kp DOT    &kp N6      &kp N5  &kp N4       &kp MINUS          &kp COMMA  &kp TAB       &kp RET       &kp LC(BSPC)  &m_lgui_wen
    &kp PLUS   &kp N3      &kp N2  &kp N1       &kp STAR           &none      &kp LSHFT     &kp LCTRL     &kp LALT      &kp LGUI
    &kp N1     &m_esc_wen  &kp N0  &to WEN_NAV  &kp N2             &kp N3     &to WEN_FUNC  &to WEN_BASE  &kp SPACE     &kp N4
            >;

            sensor-bindings = <&inc_dec_kp PAGE_UP PAGE_DOWN &inc_dec_kp TAB LS(TAB)>;
        };

        function_layer {
// WEN_FUNC
            bindings = <
    &kp F12  &kp F9  &kp F8  &kp F7  &kp PSCRN                &none   &none  &none         &none  &none
    &kp F11  &kp F6  &kp F5  &kp F4  &kp SLCK                 &none   &none  &none         &none  &skq LGUI
    &kp F10  &kp F3  &kp F2  &kp F1  &kp PAUSE_BREAK          &none   &none  &none         &none  &none
    &kp N1   &none   &none   &none   &kp N2                   &kp N3  &none  &to WEN_BASE  &none  &kp N4
            >;

            sensor-bindings = <&inc_dec_kp PAGE_UP PAGE_DOWN &inc_dec_kp TAB LS(TAB)>;
        };

        media_layer {
// WEN_MEDIA
            bindings = <
    &none      &none  &none       &none  &none           &rgb_ug RGB_TOG  &rgb_ug RGB_EFF  &rgb_ug RGB_HUI  &rgb_ug RGB_SAI  &rgb_ug RGB_BRI
    &skq LGUI  &none  &none       &none  &none           &kp EP_TOG       &kp C_PREV       &kp C_VOL_DN     &kp C_VOL_UP     &kp C_NEXT
    &none      &none  &none       &none  &none           &out OUT_TOG     &bt BT_SEL 0     &bt BT_SEL 1     &bt BT_SEL 2     &bt BT_SEL 3
    &kp N1     &none  &kp C_MUTE  &none  &kp N2          &kp N3           &kp C_STOP       &to WEN_BASE     &kp C_PP         &kp N4
            >;

            sensor-bindings = <&inc_dec_kp PAGE_UP PAGE_DOWN &inc_dec_kp TAB LS(TAB)>;
        };

        acute_wen_layer {
// ACUTE LAYER
            bindings = <
    &to WEN_BASE  &to WEN_BASE  &to WEN_BASE  &to WEN_BASE  &to WEN_BASE           &to WEN_BASE  &to WEN_BASE  &u_acute_wen  &to WEN_BASE  &to WEN_BASE
    &to WEN_BASE  &to WEN_BASE  &to WEN_BASE  &m_star_wen   &m_prcnt_wen           &m_at_wen     &m_comma_wen  &e_acute_wen  &i_acute_wen  &o_acute_wen
    &to WEN_BASE  &to WEN_BASE  &to WEN_BASE  &to WEN_BASE  &to WEN_BASE           &to WEN_BASE  &m_lt_wen     &m_lbrc_wen   &m_lbkt_wen   &m_lpar_wen
    &to WEN_BASE  &to WEN_BASE  &to WEN_BASE  &to WEN_BASE  &to WEN_BASE           &to WEN_BASE  &to WEN_BASE  &to WEN_BASE  &to WEN_BASE  &to WEN_BASE
          >;

            sensor-bindings = <&inc_dec_kp PAGE_UP PAGE_DOWN &inc_dec_kp TAB LS(TAB)>;
        };

        acute2_wen_layer {
// ACUTE LAYER 2
            bindings = <
    &to WEN_BASE  &to WEN_BASE  &to WEN_BASE  &to WEN_BASE  &to WEN_BASE           &to WEN_BASE  &to WEN_BASE  &to WEN_BASE  &to WEN_BASE  &to WEN_BASE
    &a_acute_wen  &m_sqt_wen    &m_dqt_wen    &m_dot_wen    &m_grave_wen           &m_tilde_wen  &m_plus_wen   &to WEN_BASE  &to WEN_BASE  &to WEN_BASE
    &m_rpar_wen   &m_rbkt_wen   &m_rbrc_wen   &m_gt_wen     &to WEN_BASE           &to WEN_BASE  &m_bslh_wen   &to WEN_BASE  &to WEN_BASE  &to WEN_BASE
    &to WEN_BASE  &to WEN_BASE  &to WEN_BASE  &to WEN_BASE  &to WEN_BASE           &to WEN_BASE  &to WEN_BASE  &to WEN_BASE  &to WEN_BASE  &to WEN_BASE
          >;

            sensor-bindings = <&inc_dec_kp PAGE_UP PAGE_DOWN &inc_dec_kp TAB LS(TAB)>;
        };

        dacute_wen_layer {
// DOUBLE ACUTE LAYER
            bindings = <
    &to WEN_BASE  &to WEN_BASE  &to WEN_BASE  &to WEN_BASE  &to WEN_BASE           &to WEN_BASE  &to WEN_BASE  &u_dacute_wen  &to WEN_BASE  &to WEN_BASE
    &to WEN_BASE  &to WEN_BASE  &to WEN_BASE  &m_equal_wen  &m_caret_wen           &m_hash_wen   &m_excl_wen   &m_semi_wen    &m_fslh_wen   &o_dacute_wen
    &to WEN_BASE  &to WEN_BASE  &to WEN_BASE  &to WEN_BASE  &to WEN_BASE           &to WEN_BASE  &to WEN_BASE  &to WEN_BASE   &to WEN_BASE  &to WEN_BASE
    &to WEN_BASE  &to WEN_BASE  &to WEN_BASE  &to WEN_BASE  &to WEN_BASE           &to WEN_BASE  &to WEN_BASE  &to WEN_BASE   &to WEN_BASE  &to WEN_BASE
          >;

            sensor-bindings = <&inc_dec_kp PAGE_UP PAGE_DOWN &inc_dec_kp TAB LS(TAB)>;
        };

        diaresis_layer {
// DIARESIS LAYER
            bindings = <
    &to WEN_BASE  &to WEN_BASE  &to WEN_BASE  &to WEN_BASE  &to WEN_BASE           &to WEN_BASE  &to WEN_BASE  &u_diaresis_wen  &to WEN_BASE  &to WEN_BASE
    &to WEN_BASE  &to WEN_BASE  &to WEN_BASE  &m_pipe_wen   &m_amps_wen            &m_dllr_wen   &m_minus_wen  &m_qmark_wen     &m_colon_wen  &o_diaresis_wen
    &to WEN_BASE  &to WEN_BASE  &to WEN_BASE  &to WEN_BASE  &to WEN_BASE           &to WEN_BASE  &m_under_wen  &to WEN_BASE     &to WEN_BASE  &to WEN_BASE
    &to WEN_BASE  &to WEN_BASE  &to WEN_BASE  &to WEN_BASE  &to WEN_BASE           &to WEN_BASE  &to WEN_BASE  &to WEN_BASE     &to WEN_BASE  &to WEN_BASE
          >;

            sensor-bindings = <&inc_dec_kp PAGE_UP PAGE_DOWN &inc_dec_kp TAB LS(TAB)>;
        };

    };
};

