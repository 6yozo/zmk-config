/*
 * Copyright (c) 2022 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/ext_power.h>

// Postfix naming convention
// ---
// First letter:
//   w -> windows
//   l -> linux
//   m -> mac
// 2nd and 3rd letter:
//   en -> US International
//   hu -> Hungarian
//
// dacute -> double acute
// cap -> capital

/ {
    behaviors {
      skq: sticky_key_quick_release {
        compatible = "zmk,behavior-sticky-key";
        label = "STICKY_KEY_QUICK_RELEASE";
        #binding-cells = <1>;
        bindings = <&kp>;
        release-after-ms = <1000>;
        quick-release;
        ignore-modifiers;
      };

      o_acute_wen: o_acute_wen_with_shift {
        compatible = "zmk,behavior-mod-morph";
        label = "O_ACUTE_WITH_SHIFT";
        #binding-cells = <0>;
        bindings = <&m_o_acute_wen>, <&m_cap_o_acute_wen>;
        mods = <(MOD_RSFT|MOD_LSFT)>;
      };
      
      e_acute_wen: e_acute_wen_with_shift {
        compatible = "zmk,behavior-mod-morph";
        label = "E_ACUTE_WITH_SHIFT";
        #binding-cells = <0>;
        bindings = <&m_e_acute_wen>, <&m_cap_e_acute_wen>;
        mods = <(MOD_RSFT|MOD_LSFT)>;
      };

      a_acute_wen: a_acute_wen_with_shift {
        compatible = "zmk,behavior-mod-morph";
        label = "A_ACUTE_WITH_SHIFT";
        #binding-cells = <0>;
        bindings = <&m_a_acute_wen>, <&m_cap_a_acute_wen>;
        mods = <(MOD_RSFT|MOD_LSFT)>;
      };

      u_acute_wen: u_acute_wen_with_shift {
        compatible = "zmk,behavior-mod-morph";
        label = "U_ACUTE_WITH_SHIFT";
        #binding-cells = <0>;
        bindings = <&m_u_acute_wen>, <&m_cap_u_acute_wen>;
        mods = <(MOD_RSFT|MOD_LSFT)>;
      };

      i_acute_wen: i_acute_wen_with_shift {
        compatible = "zmk,behavior-mod-morph";
        label = "I_ACUTE_WITH_SHIFT";
        #binding-cells = <0>;
        bindings = <&m_i_acute_wen>, <&m_cap_i_acute_wen>;
        mods = <(MOD_RSFT|MOD_LSFT)>;
      };

      o_dacute_wen: o_dacute_wen_with_shift {
        compatible = "zmk,behavior-mod-morph";
        label = "O_DACUTE_WITH_SHIFT";
        #binding-cells = <0>;
        bindings = <&m_o_dacute_wen>, <&m_cap_o_dacute_wen>;
        mods = <(MOD_RSFT|MOD_LSFT)>;
      };

      u_dacute_wen: u_dacute_wen_with_shift {
        compatible = "zmk,behavior-mod-morph";
        label = "U_DACUTE_WITH_SHIFT";
        #binding-cells = <0>;
        bindings = <&m_u_dacute_wen>, <&m_cap_u_dacute_wen>;
        mods = <(MOD_RSFT|MOD_LSFT)>;
      };

      o_diaresis_wen: o_diaresis_wen_with_shift {
        compatible = "zmk,behavior-mod-morph";
        label = "O_DIARESIS_WITH_SHIFT";
        #binding-cells = <0>;
        bindings = <&m_o_diaresis_wen>, <&m_cap_o_diaresis_wen>;
        mods = <(MOD_RSFT|MOD_LSFT)>;
      };

      u_diaresis_wen: u_diaresis_wen_with_shift {
        compatible = "zmk,behavior-mod-morph";
        label = "U_DIARESIS_WITH_SHIFT";
        #binding-cells = <0>;
        bindings = <&m_u_diaresis_wen>, <&m_cap_u_diaresis_wen>;
        mods = <(MOD_RSFT|MOD_LSFT)>;
      };

    };

 macros {
 // wait-ms and tap-ms value
 // ---
 //
 // Executing an accented macro should not take longer than tapping a dedicated
 // key at maximum speed(300 WPM).
 //
 // 38 WPM -> 188 CPM, so 300 WPM -> (* 188 (/ 300 38)) = 1316 CPM =
 // (/ 1316 60) CPS = 21 CPS
 //
 // Hitting keys close to 50 ms / keypress is humanly possible.
 //
 // Unicode Sequences
 // ---
 //
 // Emacs uses the alt-num combination as a prefix argument, so unicode
 // sequences do not work in emacs
 //
 // Num lock state interferes with Unicode Sequences. You must have a num lock
 // key to make unicode sequences work.
 //
 // Unicode Sequences do not handle shift states automatically for capital
 // letters

        ZMK_MACRO(m_e_acute_wen,
            wait-ms = <13>;
            tap-ms = <13>;
            bindings
                = <&macro_press   &kp LALT>
                , <&macro_tap     &kp KP_N1 &kp KP_N3 &kp KP_N0>
                , <&macro_release &kp LALT>
                , <&macro_tap     &to 0>
                ;
        )

        ZMK_MACRO(m_cap_e_acute_wen,
            wait-ms = <13>;
            tap-ms = <13>;
            bindings
                = <&macro_press   &kp LALT>
                , <&macro_tap     &kp KP_N1 &kp KP_N4 &kp KP_N4>
                , <&macro_release &kp LALT>
                , <&macro_tap     &to 0>
                ;
        )

        ZMK_MACRO(m_a_acute_wen,
            wait-ms = <13>;
            tap-ms = <13>;
            bindings
                = <&macro_press   &kp LALT>
                , <&macro_tap     &kp KP_N1 &kp KP_N6 &kp KP_N0>
                , <&macro_release &kp LALT>
                , <&macro_tap     &to 0>
                ;
        )

        ZMK_MACRO(m_cap_a_acute_wen,
            wait-ms = <13>;
            tap-ms = <13>;
            bindings
                = <&macro_press   &kp LALT>
                , <&macro_tap     &kp KP_N0 &kp KP_N1 &kp KP_N9 &kp KP_N3>
                , <&macro_release &kp LALT>
                , <&macro_tap     &to 0>
                ;
        )
        
        ZMK_MACRO(m_o_acute_wen,
            wait-ms = <13>;
            tap-ms = <13>;
            bindings
                = <&macro_press   &kp LALT>
                , <&macro_tap     &kp KP_N1 &kp KP_N6 &kp KP_N2>
                , <&macro_release &kp LALT>
                , <&macro_tap     &to 0>
                ;
        )

        ZMK_MACRO(m_cap_o_acute_wen,
            wait-ms = <13>;
            tap-ms = <13>;
            bindings
                = <&macro_press   &kp LALT>
                , <&macro_tap     &kp KP_N0 &kp KP_N2 &kp KP_N1 &kp KP_N1>
                , <&macro_release &kp LALT>
                , <&macro_tap     &to 0>
                ;
        )

        ZMK_MACRO(m_i_acute_wen,
            wait-ms = <13>;
            tap-ms = <13>;
            bindings
                = <&macro_press   &kp LALT>
                , <&macro_tap     &kp KP_N1 &kp KP_N6 &kp KP_N1>
                , <&macro_release &kp LALT>
                , <&macro_tap     &to 0>
                ;
        )

        ZMK_MACRO(m_cap_i_acute_wen,
            wait-ms = <13>;
            tap-ms = <13>;
            bindings
                = <&macro_press   &kp LALT>
                , <&macro_tap     &kp KP_N0 &kp KP_N2 &kp KP_N0 &kp KP_N5>
                , <&macro_release &kp LALT>
                , <&macro_tap     &to 0>
                ;
        )

        ZMK_MACRO(m_u_acute_wen,
            wait-ms = <13>;
            tap-ms = <13>;
            bindings
                = <&macro_press   &kp LALT>
                , <&macro_tap     &kp KP_N1 &kp KP_N6 &kp KP_N3>
                , <&macro_release &kp LALT>
                , <&macro_tap     &to 0>
                ;
        )

        ZMK_MACRO(m_cap_u_acute_wen,
            wait-ms = <13>;
            tap-ms = <13>;
            bindings
                = <&macro_press   &kp LALT>
                , <&macro_tap     &kp KP_N0 &kp KP_N2 &kp KP_N1 &kp KP_N8>
                , <&macro_release &kp LALT>
                , <&macro_tap     &to 0>
                ;
        )

        ZMK_MACRO(m_dot_acute_wen,
            wait-ms = <25>;
            tap-ms = <25>;
            bindings
                = <&macro_tap     &kp DOT>
                , <&macro_tap     &to 0>
                ;
        )

        ZMK_MACRO(m_o_dacute_wen,
            wait-ms = <13>;
            tap-ms = <13>;
            bindings
                = <&macro_press   &kp LALT>
                , <&macro_tap     &kp KP_N0 &kp KP_N3 &kp KP_N3 &kp KP_N7>
                , <&macro_release &kp LALT>
                , <&macro_tap     &to 0>
                ;
        )

        ZMK_MACRO(m_cap_o_dacute_wen,
            wait-ms = <13>;
            tap-ms = <13>;
            bindings
                = <&macro_press   &kp LALT>
                , <&macro_tap     &kp KP_N0 &kp KP_N3 &kp KP_N3 &kp KP_N6>
                , <&macro_release &kp LALT>
                , <&macro_tap     &to 0>
                ;
        )

        ZMK_MACRO(m_u_dacute_wen,
            wait-ms = <13>;
            tap-ms = <13>;
            bindings
                = <&macro_press   &kp LALT>
                , <&macro_tap     &kp KP_N0 &kp KP_N3 &kp KP_N6 &kp KP_N9>
                , <&macro_release &kp LALT>
                , <&macro_tap     &to 0>
                ;
        )

        ZMK_MACRO(m_cap_u_dacute_wen,
            wait-ms = <13>;
            tap-ms = <13>;
            bindings
                = <&macro_press   &kp LALT>
                , <&macro_tap     &kp KP_N0 &kp KP_N3 &kp KP_N6 &kp KP_N8>
                , <&macro_release &kp LALT>
                , <&macro_tap     &to 0>
                ;
        )

        ZMK_MACRO(m_comma_dacute_wen,
            wait-ms = <25>;
            tap-ms = <25>;
            bindings
                = <&macro_tap     &kp COMMA>
                , <&macro_tap     &to 0>
                ;
        )

        ZMK_MACRO(m_o_diaresis_wen,
            wait-ms = <13>;
            tap-ms = <13>;
            bindings
                = <&macro_press   &kp LALT>
                , <&macro_tap     &kp KP_N1 &kp KP_N4 &kp KP_N8>
                , <&macro_release &kp LALT>
                , <&macro_tap     &to 0>
                ;
        )

        ZMK_MACRO(m_cap_o_diaresis_wen,
            wait-ms = <13>;
            tap-ms = <13>;
            bindings
                = <&macro_press   &kp LALT>
                , <&macro_tap     &kp KP_N1 &kp KP_N5 &kp KP_N3>
                , <&macro_release &kp LALT>
                , <&macro_tap     &to 0>
                ;
        )

        ZMK_MACRO(m_u_diaresis_wen,
            wait-ms = <13>;
            tap-ms = <13>;
            bindings
                = <&macro_press   &kp LALT>
                , <&macro_tap     &kp KP_N1 &kp KP_N2 &kp KP_N9>
                , <&macro_release &kp LALT>
                , <&macro_tap     &to 0>
                ;
        )

        ZMK_MACRO(m_cap_u_diaresis_wen,
            wait-ms = <13>;
            tap-ms = <13>;
            bindings
                = <&macro_press   &kp LALT>
                , <&macro_tap     &kp KP_N1 &kp KP_N5 &kp KP_N4>
                , <&macro_release &kp LALT>
                , <&macro_tap     &to 0>
                ;
        )

        ZMK_MACRO(m_sqt_diaresis_wen,
            wait-ms = <25>;
            tap-ms = <25>;
            bindings
                = <&macro_tap     &kp SQT>
                , <&macro_tap     &to 0>
                ;
        )

    };

    keymap {
        compatible = "zmk,keymap";

        base_wen_layer {
// 0: COLEMAK-DH
            bindings = <
    &to 9   &kp W  &kp F        &kp P      &kp B           &kp J   &kp L      &kp U       &kp Y    &kp Q
    &kp A   &kp R  &kp S        &kp T      &kp G           &kp M   &kp N      &kp E       &kp I    &kp O
    &to 8   &to 7  &kp C        &kp D      &kp V           &kp K   &kp H      &kp SLASH   &kp X    &kp Z
    &kp N1  &mo 6  &lt 1 SPACE  &lt 5 TAB  &kp N2          &kp N3  &lt 3 RET  &lt 2 BSPC  &mo 4    &kp N4
            >;

            sensor-bindings = <&inc_dec_kp PAGE_UP PAGE_DOWN &inc_dec_kp TAB LS(TAB)>;
        };

        navigation_layer {
/* 1: NAV
 * Bootloader does not work on the peripherial side of the split keyboard only on the central side.
 * The reset button can be used to go into bootloader mode instead.
 */
            bindings = <
    &none     &none     &none      &none      &kp KP_NUMLOCK          &kp K_AGAIN  &kp K_PASTE  &kp K_COPY  &kp K_CUT  &kp K_UNDO
    &kp LGUI  &kp LALT  &kp LCTRL  &kp LSHFT  &caps_word              &kp CAPS     &kp LEFT     &kp DOWN    &kp UP     &kp RIGHT
    &none     &none     &none      &none      &kp SCROLLLOCK          &kp INS      &kp HOME     &kp PG_DN   &kp PG_UP  &kp END
    &kp N1    &none     &none      &none      &kp N2                  &kp N3       &kp RET      &kp BSPC    &kp DEL    &kp N4
            >;

            sensor-bindings = <&inc_dec_kp PAGE_UP PAGE_DOWN &inc_dec_kp TAB LS(TAB)>;
        };

        number_layer {
// 2: NUM
            bindings = <
    &kp LBKT   &kp N7   &kp N8  &kp N9     &kp RBKT           &none   &none      &none      &none     &none
    &kp SEMI   &kp N4   &kp N5  &kp N6     &kp EQUAL          &none   &kp LSHFT  &kp LCTRL  &kp LALT  &kp LGUI
    &kp GRAVE  &kp N1   &kp N2  &kp N3     &kp BSLH           &none   &none      &none      &none     &none
    &kp N1     &kp DOT  &kp N0  &kp MINUS  &kp N2             &kp N3  &none      &none      &none     &kp N4
            >;

            sensor-bindings = <&inc_dec_kp PAGE_UP PAGE_DOWN &inc_dec_kp TAB LS(TAB)>;
        };

        symbol_layer {
// 3: SYM, NUM + SHIFT can be used instead
            bindings = <
    &kp LBRC   &kp AMPS  &kp ASTRK  &kp LPAR   &kp RBRC          &none   &none      &none      &none     &none
    &kp COLON  &kp DLLR  &kp PRCNT  &kp CARET  &kp PLUS          &none   &kp LSHFT  &kp LCTRL  &kp LALT  &kp LGUI
    &kp TILDE  &kp EXCL  &kp AT     &kp HASH   &kp PIPE          &none   &none      &none      &none     &none
    &kp N1     &kp LPAR  &kp RPAR   &kp UNDER  &kp N2            &kp N3  &none      &none      &none     &kp N4
            >;

            sensor-bindings = <&inc_dec_kp PAGE_UP PAGE_DOWN &inc_dec_kp TAB LS(TAB)>;
        };

        function_layer {
// 4: FUNC
            bindings = <
    &kp F12  &kp F7     &kp F8     &kp F9     &kp PSCRN                &none   &none       &none       &none      &none
    &kp F11  &kp F4     &kp F5     &kp F6     &kp SLCK                 &none   &skq LSHFT  &skq LCTRL  &skq LALT  &skq LGUI
    &kp F10  &kp F1     &kp F2     &kp F3     &kp PAUSE_BREAK          &none   &none       &none       &none      &none
    &kp N1   &kp ESC    &kp SPACE  &kp K_APP  &kp N2                   &kp N3  &none       &none       &none      &kp N4
            >;

            sensor-bindings = <&inc_dec_kp PAGE_UP PAGE_DOWN &inc_dec_kp TAB LS(TAB)>;
        };

        mouse_layer {
// 5: MOUSE,  NOT SUPPORTED YET
            bindings = <
    &none     &none     &none      &none      &none           &kp K_AGAIN  &kp K_PASTE  &kp K_COPY  &kp K_CUT  &kp K_UNDO
    &kp LGUI  &kp LALT  &kp LCTRL  &kp LSHFT  &none           &none        &none        &none       &none      &none
    &none     &none     &none      &none      &none           &none        &none        &none       &none      &none
    &kp N1    &none     &none      &none      &kp N2          &kp N3       &none        &none       &none      &kp N4
            >;

            sensor-bindings = <&inc_dec_kp PAGE_UP PAGE_DOWN &inc_dec_kp TAB LS(TAB)>;
        };

        media_layer {
// 6: Media
            bindings = <
    &none      &none      &none       &none       &none           &rgb_ug RGB_TOG  &rgb_ug RGB_EFF  &rgb_ug RGB_HUI  &rgb_ug RGB_SAI  &rgb_ug RGB_BRI
    &skq LGUI  &skq LALT  &skq LCTRL  &skq LSHFT  &none           &kp EP_TOG       &kp C_PREV       &kp C_VOL_DN     &kp C_VOL_UP     &kp C_NEXT
    &none      &none      &none       &none       &none           &out OUT_TOG     &bt BT_SEL 0     &bt BT_SEL 1     &bt BT_SEL 2     &bt BT_SEL 3
    &kp N1     &none      &none       &none       &kp N2          &kp N3           &kp C_STOP       &kp C_PP         &kp C_MUTE       &kp N4
            >;

            sensor-bindings = <&inc_dec_kp PAGE_UP PAGE_DOWN &inc_dec_kp TAB LS(TAB)>;
        };

        acute_wen_layer {
// 7: Acute Layer
            bindings = <
    &to 0         &to 0  &to 0  &to 0  &to 0           &to 0  &to 0  &u_acute_wen    &to 0                &to 0
    &a_acute_wen  &to 0  &to 0  &to 0  &to 0           &to 0  &to 0  &e_acute_wen    &i_acute_wen         &o_acute_wen
    &to 0         &to 0  &to 0  &to 0  &to 0           &to 0  &to 0  &to 0           &m_sqt_diaresis_wen  &to 0
    &to 0         &to 0  &to 0  &to 0  &to 0           &to 0  &to 0  &to 0           &to 0                &to 0
          >;

            sensor-bindings = <&inc_dec_kp PAGE_UP PAGE_DOWN &inc_dec_kp TAB LS(TAB)>;
        };

        dacute_wen_layer {
// 8: Double Acute Layer
            bindings = <
    &to 0  &to 0  &to 0  &to 0  &to 0           &to 0  &to 0  &u_dacute_wen  &to 0  &to 0
    &to 0  &to 0  &to 0  &to 0  &to 0           &to 0  &to 0  &to 0          &to 0  &o_dacute_wen
    &to 0  &to 0  &to 0  &to 0  &to 0           &to 0  &to 0  &to 0          &to 0  &m_dot_acute_wen
    &to 0  &to 0  &to 0  &to 0  &to 0           &to 0  &to 0  &to 0          &to 0  &to 0
          >;

            sensor-bindings = <&inc_dec_kp PAGE_UP PAGE_DOWN &inc_dec_kp TAB LS(TAB)>;
        };

        diaresis_layer {
// 9: Diaresis Layer
            bindings = <
    &to 0  &to 0  &to 0  &to 0  &to 0           &to 0  &to 0  &u_diaresis_wen  &to 0  &m_comma_dacute_wen
    &to 0  &to 0  &to 0  &to 0  &to 0           &to 0  &to 0  &to 0            &to 0  &o_diaresis_wen
    &to 0  &to 0  &to 0  &to 0  &to 0           &to 0  &to 0  &to 0            &to 0  &to 0
    &to 0  &to 0  &to 0  &to 0  &to 0           &to 0  &to 0  &to 0            &to 0  &to 0
          >;

            sensor-bindings = <&inc_dec_kp PAGE_UP PAGE_DOWN &inc_dec_kp TAB LS(TAB)>;
        };

    };
};
